#include "Systick.h"
#include "SZ_STM32F107VC_LIB.h"

__IO u32 TimingDelay = 0;

__STATIC_INLINE uint32_t SysTick_wty(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */


  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
				    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  GPIO_SetBits(GPIOD, GPIO_ResetBits);
  return (0UL);                                                     /* Function successful */
}

/**-------------------------------------------------------
  * @������ SZ_STM32_SysTickInit
  * @����   ��ʼ��ϵͳ��ʱ��SysTick
  *         �û����Ը����Ҫ�޸�
  * @����   ÿ���жϴ���
  * @����ֵ ��
***------------------------------------------------------*/
void SZ_STM32_SysTickInit(uint32_t HzPreSecond)
{
    /* HzPreSecond = 1000 to Setup SysTick Timer for 1 msec interrupts.
     ------------------------------------------
    1. The SysTick_Config() function is a CMSIS function which configure:
       - The SysTick Reload register with value passed as function parameter.
       - Configure the SysTick IRQ priority to the lowest value (0x0F).
       - Reset the SysTick Counter register.
       - Configure the SysTick Counter clock source to be Core Clock Source (HCLK).
       - Enable the SysTick Interrupt.
       - Start the SysTick Counter.
    
    2. You can change the SysTick Clock source to be HCLK_Div8 by calling the
       SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8) just after the
       SysTick_Config() function call. The SysTick_CLKSourceConfig() is defined
       inside the misc.c file.

    3. You can change the SysTick IRQ priority by calling the
       NVIC_SetPriority(SysTick_IRQn,...) just after the SysTick_Config() function 
       call. The NVIC_SetPriority() is defined inside the core_cm3.h file.

    4. To adjust the SysTick time base, use the following formula:
                            
         Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
       - Reload Value is the parameter to be passed for SysTick_Config() function
       - Reload Value should not exceed 0xFFFFFF
    */
	/*SysTick_Config*/
    if (SysTick_wty(SystemCoreClock / HzPreSecond))
    {
        /* Capture error */ 
        while (1);
    }
}



/*
 * ������TimingDelay_Decrement
 * ����  ����ȡ���ĳ���
 * ����  ����
 * ���  ����
 * ����  ���� SysTick �жϺ��� SysTick_Handler()����
 */  
__IO void TimingDelay_Decrement(void);
__IO void TimingDelay_Decrement(void)
{
	if (TimingDelay != 0)
	{ 
		TimingDelay--;
//		SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
	}
}

/*
 * ������Delay_ms
 * ����  ��ms��ʱ����,1msΪһ����λ
 * ����  ��- nTime
 * ���  ����
 * ����  ��Delay_us( 1 ) ��ʵ�ֵ���ʱΪ 1 * 1ms = 1ms
 *       ���ⲿ���� 
 */

void Delay_us(__IO u32 nTime)
{ 
	TimingDelay = nTime;
	// ʹ�ܵδ�ʱ��  
	GPIO_ResetBits(GPIOD, GPIO_Pin_2);
	SysTick->CTRL |=  SysTick_CTRL_ENABLE_Msk;
	GPIO_SetBits(GPIOD, GPIO_Pin_2);
	while(TimingDelay != 0)
	{
		delay(800000);
		GPIO_SetBits(GPIOD, GPIO_Pin_2);
		delay(800000);
		GPIO_ResetBits(GPIOD, GPIO_Pin_3);
	};

	// �رյδ�ʱ��  
	SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
	GPIO_ResetBits(GPIOD, GPIO_Pin_2);
}

void Delay_ms(__IO u32 nTime)
{ 
	Delay_us(nTime*1000);
}

void Delay_s(__IO u32 nTime)
{ 
	Delay_us(nTime*1000000);
}

void SysTick_Handler (void)
{
  // DO NOT loop, just return.
  // Useful in case someone (like STM HAL) inadvertently enables SysTick.

//	if (TimingDelay != 0)
//		{
//			TimingDelay--;
//	//		SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
//		}
//	TimingDelay_Decrement() ;
	TimingDelay++;
	return;
}
